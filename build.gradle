plugins {
	id 'org.springframework.boot' version '2.5.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.javareactive'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'io.r2dbc:r2dbc-postgresql'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
	testImplementation ('org.springframework.boot:spring-boot-starter-test'){
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}


/***
 *
 * Component Test
 *
 */

sourceSets {
	componentTest {
		java.srcDir "$projectDir/src/componentTest/java"
		resources.srcDir "$projectDir/src/componentTest/resources"
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

configurations {
	downloadDependenciesConfig.extendsFrom implementation, testImplementation, testRuntime
	componentTestImplementation.extendsFrom testImplementation
	componentTestRuntime.extendsFrom testRuntime
}

// run the componentTest/** tests
task componentTest(type: Test) {
	description = 'Runs component tests'
	group = 'verification'
	testClassesDirs = sourceSets.componentTest.output.classesDirs
	classpath = sourceSets.componentTest.runtimeClasspath
	outputs.upToDateWhen { false }
}

// pull dependencies needed by the application
task downloadDependencies (type: Exec) {
	configurations.downloadDependenciesConfig.files
	commandLine 'echo', 'Downloaded all dependencies'
}

task buildDockerimage(type: Exec) {
	workingDir "$projectDir"
	commandLine 'docker', 'build', '.', '-t', "$serviceGroupId/$serviceApplicationName:$serviceVersion"
}

task composeUp(type: Exec) {
	dependsOn buildDockerimage
	workingDir "$projectDir"
	environment << [ SERVICE_TAG: "$serviceVersion", SERVICE_GROUP: "$serviceGroupId", SERVICE_NAME: "$serviceApplicationName", SPRING_PROFILE: "docker" ]
	commandLine 'docker-compose', 'up', '-d'
}
task composeDependenciesUp(type: Exec) {
	workingDir "$projectDir"
	commandLine 'docker-compose', '-f', 'docker-compose.yml', 'up', '-d'
}
task composeDown(type: Exec) {
	workingDir "$projectDir"
	commandLine 'docker-compose', 'down', '-t', '60', '-v'
}

task waitForService {
	doLast {
		def responseCode = null

		while(responseCode != 200) {
			sleep 1000
			try {
				//def req = "http://localhost:4000/actuator/health".toURL().openConnection()
				def req = "http://localhost:8080/api/v1/health".toURL().openConnection()
				responseCode = req.getResponseCode()
				logger.log(LogLevel.INFO, "Response returned from service $responseCode")
			}
			catch(Exception) {
				logger.log(LogLevel.INFO, "Failed to connect to service")
			}
		}
	}
}

task componentTestDocker {
	dependsOn componentTestClasses, composeUp, waitForService
	doLast {
		componentTest.executeTests()
	}
	finalizedBy composeDown
}

// print tests out to console as they run
def testLogging = {
	afterTest { desc, result ->
		logger.quiet "Test ${desc.name} [${desc.className}] with result: ${result.resultType}"
	}
}

test {
	configure testLogging
	useJUnitPlatform()
}

componentTest {
	configure testLogging
	useJUnitPlatform()
}
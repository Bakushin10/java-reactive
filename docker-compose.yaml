version: '3.7'

services:
    java-service:
        build:
            context: .
            dockerfile: ${DOCKERFILE_JAVA_SERVICE}
        image: ${COMPONENT_TEST}/java-reactive
        container_name: ${COMPONENT_TEST}-java-reactive
        ports:
            - 8080:8080
        environment:
            - CONTEXT_PATH=${CONTEXT_PATH}
            - SPRING_PROFILE=${SPRING_PROFILE}

            # switch between R2DBC_HOST_CONTAINER and R2DBC_HOST_LOCALHOST
            - R2DBC_HOST=${R2DBC_HOST_CONTAINER}
            - R2DBC_DB=${R2DBC_DB}
            - R2DBC_USERNAME=${R2DBC_USERNAME}
            - R2DBC_PASSWORD=${R2DBC_PASSWORD}
        networks:
            - component-test-network
    
    postgres:
        image: ${POSTGRES_IMAGE}
        container_name: postgres-component-test
        ports:
            - '5432:5432'
        volumes:
            - ${POSTGRES_MASTER_DATA}:/var/lib/postgresql/data
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_PASSWORD=${password}
        networks:
            - component-test-network

    #
    #
    # this is other service that main app need to talk to
    # in order to test the connection with other microservices
    # notice that there is no build command since it only needs to
    # spin up the container from the image
    #
    # if the image needs to be updated, build the new image separately 
    #
    #
    #
    # other-services-to-talk-to:
    #     image: ${COMPONENT_TEST}/service-1
    #     container_name: ${COMPONENT_TEST}-service-1
    #     ports:
    #         - 8081:8080
    #     environment:
    #         - CONTEXT_PATH=${CONTEXT_PATH}
    #         - SPRING_PROFILE=${SPRING_PROFILE}
    #         - R2DBC_HOST=${R2DBC_HOST}
    #         - R2DBC_DB=${R2DBC_DB}
    #         - R2DBC_USERNAME=${R2DBC_USERNAME}
    #         - R2DBC_PASSWORD=${R2DBC_PASSWORD}
        
networks:
    component-test-network:
        name: component-test-network
    
